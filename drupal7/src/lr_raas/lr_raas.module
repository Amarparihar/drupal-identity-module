<?php

module_load_include('inc', 'lr_raas', 'includes/lr_raas.sdk');
/**
 * Implements hook_menu().
 *
 * Responed to url handling for lr_raas module.
 *
 * @return array An array of menu items
 */
function lr_raas_menu() {
  $items['user/%user/password'] = array(
    'title' => 'Password',
    'page callback' => 'lr_raas_change_password',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array('user'),
    'access callback' => 'change_password_custom_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 18,
    'position' => 'right',
  ); 
     return $items;
}

/**
 * Set session from user profile data.
 */
function lr_raas_add_loginradius_userdata($userprofile, $token){     
    $_SESSION['emailVerified'] = false; 
    if (isset($userprofile->EmailVerified)) {
    $_SESSION['emailVerified'] = $userprofile->EmailVerified;
    } 
    $_SESSION['provider'] = $userprofile->Provider;   
}
/**
 * Only authenticated user can access change password page.
 */
function change_password_custom_access() {
    $access_granted = in_array('administrator', $GLOBALS['user']->roles); 
    $optionVal = variable_get('lr_raas_email_verification_condition');
    if ($access_granted) {
        return FALSE;
    } elseif ($optionVal == 1 || $optionVal == 2) {
        if ($_SESSION['provider'] == 'RAAS' || $_SESSION['emailVerified']) {              
            return TRUE;
        } else {         
            return FALSE;
        }
    }
    return TRUE;    
}

/**
 * Update User Registration Custom Fields.
 *
 * @return array
 */
function getUpdatedRaasCustomFields() {
  $params = array();
  $field_map = variable_get('lr_social_login_user_fields', array());
  $instances = field_info_instances('user', 'user');

  foreach ($instances as $field_name => $instance) {
    if (isset($_POST[$field_name])) {
      if (isset($_POST[$field_name][LANGUAGE_NONE][0]['value'])) {
        if (isset($field_map[$field_name])) {
          $temp_parts = explode('|', $field_map[$field_name]);
          $value = $_POST[$field_name][LANGUAGE_NONE][0]['value'];
          if (isset($temp_parts[0]) && $temp_parts[0] == 'raas' && isset($temp_parts[1])) {
            $params['CustomFields'][$temp_parts[1]] = $value;
          }
          else {
            $key = $field_map[$field_name];
            $params[$key] = $value;
          }
        }
      }
    }
  }
  return $params;
}

/**
 * Get profile 2 fields when user do update
 * @param $profile
 */
function lr_raas_profile2_presave($profile) {
  $profile_field_map = variable_get('lr_social_login_profile_fields', array());
  $params = array();
  foreach (field_info_instances('profile2') as $field_name => $instances) {
    foreach ($instances as $instance => $array) {
      if (isset($_POST['profile_' . $field_name][$array['field_name']])) {
        if (isset($_POST['profile_' . $field_name][$array['field_name']][LANGUAGE_NONE][0]['value'])) {
          $profile_temp_parts = explode('|', $profile_field_map[$field_name][$array['field_name']]);
          $value = $_POST['profile_' . $field_name][$array['field_name']][LANGUAGE_NONE][0]['value'];
          if (isset($profile_temp_parts[0]) && $profile_temp_parts[0] == 'raas' && isset($profile_temp_parts[1])) {
            $params['CustomFields'][$profile_temp_parts[1]] = $value;
          }
          else {
            $key = $profile_field_map[$field_name][$array['field_name']];
            $params[$key] = $value;
          }
        }
      }
    }
  }
  if (count($params) > 0) {
    $raas_sdk = new LoginradiusRaasSDK();
    $provider_user_id = lr_raas_get_raas_user_id($profile->uid);
    $raas_sdk->raasUpdateUser($params, $provider_user_id);
  }
}

/**
 * Implements hook_user_update().
 * Block/unblock user, Set/Update password and create new user.
 *
 *
 * @param $edit
 * @param $account user account object
 * @param $category
 */
function lr_raas_user_update(&$edit, $account, $category) {
  $raas_uid = lr_raas_get_raas_uid($account->uid);
  $provider_user_id = db_query('SELECT provider_id FROM {loginradius_mapusers} WHERE user_id = :id and provider = :name', array(
    'id' => $account->uid,
    'name' => 'raas',
  ))->fetchField();
  if (isset($_POST['op']) && $_POST['op'] == 'Save') {
    $raas_sdk = new LoginradiusRaasSDK();
    $params = array();
    $params = array_merge($params, getUpdatedRaasCustomFields());
    if (count($params) > 0) {
      $raas_sdk->raasUpdateUser($params, $provider_user_id);
    }
    if (isset($_POST['status'])) {
      if ($_POST['status'] == "0" && isset($raas_uid) && !empty($raas_uid)) {
        lr_raas_block_user($raas_uid);
      }
      else {
        lr_raas_unblock_user($raas_uid);
      }
    }
    if (isset($_POST['pass']['pass1']) && !empty($_POST['pass']['pass1'])) {
      if (user_access('administer site configuration')) {
        if (empty($provider_user_id)) {
          if (empty($raas_uid)) {
            $params = array(
              'EmailId' => $account->mail,
              'firstname' => $account->name,
              'lastname' => '',
              'password' => $_POST['pass']['pass1'],
            );
            $raas_sdk->raasCreateUser($params);
            return;
          }
          else {
            $params = array(
              'accountid' => $raas_uid,
              'password' => $_POST['pass']['pass1'],
              'emailid' => $account->mail,
            );
            $raas_sdk->createRaasProfile($params);
          }
        }
        else {
          $raas_sdk->raasSetPassword(array('password' => $_POST['pass']['pass1']), $provider_user_id);
        }
      }
    }
  }
  elseif (isset($_POST['op']) && $_POST['op'] == 'Update') {
    if (isset($_POST['operation'])) {
      if ($_POST['operation'] == 'block' && isset($raas_uid) && !empty($raas_uid)) {
        lr_raas_block_user($raas_uid);
      }
      elseif ($_POST['operation'] == 'unblock' && isset($raas_uid) && !empty($raas_uid)) {
        lr_raas_unblock_user($raas_uid);

      }
    }
  }
}

/**
 * Block user at Raas
 *
 * @param $uid user id
 * @return mixed
 */
function lr_raas_block_user($uid) {
  $raas_sdk = new LoginradiusRaasSDK();
  return $raas_sdk->raasBlockUser(array('isblock' => 'true'), $uid);
}

/**
 * Unblock user at raas.
 *
 * @param $uid user id
 * @return mixed
 */
function lr_raas_unblock_user($uid) {
  $raas_sdk = new LoginradiusRaasSDK();
  return $raas_sdk->raasBlockUser(array('isblock' => 'false'), $uid);
}

/**
 * Get Raas uid.
 * @param $user_id user id
 * @return mixed
 */
function lr_raas_get_raas_uid($user_id) {
  return db_query('SELECT lr_raas_uid FROM {users} WHERE uid = :id', array('id' => $user_id))->fetchField();
}

/**
 * Get provider id of raas account
 *
 * @param $account_id user id
 * @return mixed
 */
function lr_raas_get_raas_user_id($account_id) {
  $value = db_query('SELECT provider_id FROM {loginradius_mapusers} WHERE user_id = :id and provider = :name', array(
    'id' => $account_id,
    'name' => 'raas',
  ))->fetchField();
  if (empty($value)) {
    $value = isset($_SESSION['current_social_provider']) ? $_SESSION['current_social_provider'] : '';
  }
  return $value;
}

/**
 * Change password.
 *
 * @param $account user object
 * @return mixed
 */
function lr_raas_change_password($account) {
  $raas_uid = lr_raas_get_raas_uid($account->uid);
  drupal_add_js('
  if(sessionStorage.getItem("lr-user-uid") == null){
  sessionStorage.setItem("lr-user-uid", "' . $raas_uid . '");}',
    array('type' => 'inline', 'scope' => 'header'));

  drupal_set_title(check_plain('Change Password'));
  $sociallinks['loginradiuscustomsso_iframe'] = array(
      'title' => '<br/>' . theme('change_password'),
      'html' => theme('change_password'),
      'attributes' => array('class' => array('loginradiuscustomsso-idlinks')),
  );
  $build['loginradiuscustomsso_iframe'] = array(
    '#theme' => 'links',
    '#links' => $sociallinks,
    '#attributes' => array('class' => array('loginradiuscustomsso-idlinks')),
  );
  return $build;
}


/**
 * Implements hook_permission().
 *
 * Responed to Define user permissions.
 *
 * @return array An array of permission settings
 */
function lr_raas_permission() {
  return array(
    'administer raas' => array(
      'title' => t('Administer Raas settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 * Show Social Account Linking interface at user profile page.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @param string $form_id A unique string identifying the form
 * @return array A renderable html form
 */
function lr_raas_form_user_profile_form_alter(&$form, &$form_state, $form_id) {   
    if (isset($_SESSION['emailVerified']) && !$_SESSION['emailVerified']) {  
        unset($form['lr_social_login_linked']);
    }   
  global $user;
  $form['account']['mail']['#disabled'] = TRUE;
  $raas_uid = lr_raas_get_raas_uid($user->uid);
  if (!empty($raas_uid)) {
    drupal_add_js('
  sessionStorage.setItem("lr-user-uid", "' . $raas_uid . '");',
      array('type' => 'inline', 'scope' => 'header'));
  }
  if (!user_access('administer site configuration')) {
    unset($form['#validate'][1]);
    unset($form['account']['pass']);
    unset($form['account']['current_pass']);
  }
  return $form;
}

/**
 * Implements hook_theme().
 *
 * @return array An associative array of theme hook information
 */
function lr_raas_theme() {
  $path = drupal_get_path('module', 'lr_raas') . '/theme';
  $theme = array(
    'lr_raas_popup' => array(
      'template' => 'lr_raas_popup',
      'variables' => array(
        'popup_params' => NULL,
      ),
      'path' => $path,
    ),
    'change_password' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'change_password',
      'path' => $path,
    ),
    'user_login' => array(
      'template' => 'user_login',
      'render element' => 'form',
      'path' => $path,
    ),
    'user_pass' => array(
      'template' => 'user_pass',
      'render element' => 'form',
      'path' => $path,

    ),
    'user_login_block' => array(
      'template' => 'user_login_block',
      'render element' => 'form',
      'path' => $path,
    ),
    'raas_social_widget_container' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'raas_social_widget_container',
      'path' => $path,
    ),
    'lr_raas_linked' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_raas_linked',
      'path' => $path,
    ),
    'lr_admin_login' => array(
      'template' => 'lr_admin_login',
      'render element' => 'form',
      'path' => $path,
    ),
    'lr_loading' => array(
      'template' => 'lr_loading',
      'variables' => array(
        'params' => NULL,
      ),
      'path' => $path,
    ),
    'lr_message' => array(
      'template' => 'lr_message',
      'variables' => array(
        'params' => NULL,
      ),
      'path' => $path,
    ),

  );

  $theme['user_register_form'] = array(
    'template' => 'user_register',
    'render element' => 'form',
    'path' => $path,

  );

  return $theme;
}

/**
 * Added Linking interface widget.
 *
 * @return string
 */
function lr_raas_add_social_linking_widget() {
  return theme('lr_raas_linked');
}

/**
 * Handle Linking functionality.
 *
 * @param $userprofile
 * @param $account
 */
function lr_raas_add_user_identities_submit($userprofile, $account) {
  $raas_sdk = new LoginradiusRaasSDK();
  $raas_uid = lr_raas_get_raas_uid($account->uid);
  if (!empty($raas_uid)) {
    $exist_account = db_query("SELECT uid FROM {users} am INNER JOIN {loginradius_mapusers} sm ON am.uid = sm.user_id WHERE provider_id = :provider_id", array(
      ':provider_id' => $userprofile->ID,
    ))
      ->fetchField();
    if (!$exist_account) {
      $result = $raas_sdk->raasLinkAccount($raas_uid, $userprofile->Provider, $userprofile->ID);
      if (isset($result->isPosted) && $result->isPosted) {
        lr_social_login_insert_into_mapping_table($userprofile->ID, $userprofile->Provider, $account->uid);
        drupal_set_message(t("Your account successfully mapped with this account."));
      }
      else {
        $msg = isset($result->description) ? $result->description : 'You cannot link this account as it is already linked with another account';
        drupal_set_message(t($msg), 'warning');
      }
    }
    else {
      $msg = 'You cannot link this account as it is already linked with another account';
      drupal_set_message(t($msg), 'warning');
    }
  }

  drupal_goto('user/' . $account->uid . '/edit');
}

/**
 * Delete user form submit.
 *
 * @param $form_state
 * @param $provider
 */
function lr_raas_add_user_delete_form_submit(&$form_state, $provider) {
  $raas_sdk = new LoginradiusRaasSDK();
  $raas_uid = lr_raas_get_raas_uid($form_state['build_info']['args'][0]->uid);
  $result = $raas_sdk->raasUnlinkAccount($raas_uid, $provider, $form_state['build_info']['args'][1]);
  if (isset($result->description)) {
    $msg = isset($result->description) ? $result->description : 'We were unable to delete the linked accounut.';
    drupal_set_message(t($msg), 'warning');
    drupal_goto('user/' . $form_state['build_info']['args'][0]->uid . '/edit');
  }
}

/**
 * Add variabled that used in user login form.
 *
 * @param $variables Contain variables of form
 */
function lr_raas_preprocess_user_login(&$variables) {     
  $variables['intro_text'] = '';
  $variables['sociallogin_widget_title'] = variable_get('lr_social_login_label_string');
  $variables['rendered'] = drupal_render_children($variables['form']);
  $variables['my_settings'] = lr_social_login_interface_settings();
}

/**
 * Add variable that used in Raas account linking widget form.
 *
 * @param $variables Contain variables of form
 */
function lr_raas_preprocess_lr_raas_linked(&$variables) {
  $variables['my_settings'] = lr_social_login_interface_settings();
}

/**
 * Add variable that used in Raas account linking widget form.
 *
 * @param $variables Contain variables of form
 */
function lr_raas_preprocess_raas_social_widget_container(&$variables) {
    $variables['my_settings'] = lr_social_login_interface_settings();
}
/**
 *  Add variabled that used in user login block form.
 * @param $variables Contain variables of form
 */
function lr_raas_preprocess_user_login_block(&$variables) { 
  unset($variables['form']['lr_social_login_links']);
  $variables['my_settings'] = lr_social_login_interface_settings();
  $variables['intro_text'] = '';
  $variables['sociallogin_widget_title'] = variable_get('lr_social_login_label_string');
  $variables['rendered'] = drupal_render_children($variables['form']);
  $form = drupal_get_form('user_login_block');
  $variables['links'] = isset($form['links']['#markup']) ? $form['links']['#markup'] : '';

}

/**
 *  Add variabled that used in user login admin form.
 * @param $variables Contain variables of form
 */
function lr_raas_preprocess_lr_admin_login(&$variables) {
  $form = drupal_get_form('user_login_block');
  $variables['bulid_id'] = $form["#build_id"];
  $variables['action'] = $form["#action"];
}

/**
 *  Add variabled that used in user registration form.
 * @param $variables Contain variables of form
 */
function lr_raas_preprocess_user_register_form(&$variables) {   
  global $user;
  $variables['my_settings'] = lr_social_login_interface_settings();
  $variables['sociallogin_widget_title'] = variable_get('lr_social_login_label_string');
  $variables['intro_text'] = '';
  $variables['admin_access'] = FALSE;
  if ((is_array($user->roles) && in_array('administrator', $user->roles))) {
    $variables['admin_access'] = TRUE;
  }
  $variables['rendered'] = drupal_render_children($variables['form']);
}


/**
 * Implements hook_help().
 *
 * Respond to Provide online user help links.
 *
 * @param string $path The router menu path
 * @return string A localized string containing the help text
 */
function lr_raas_help($path) {
  switch ($path) {
    case 'admin/help#lr_raas':
      $loginradius_link = l(t('LoginRadius'), 'http://www.LoginRadius.com/', array('attributes' => array('target' => '_blank')));
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This social login module is developed by LoginRadius which is a Software As A Service (SaaS).Social Login module enables social login on a Drupal website letting users log in through their existing IDs such as Facebook, Twitter, Google, Yahoo and over 15 more! Other than social login, lr_raas plugin also include User Profile Data and Social Analytics. Please visit the !loginradius.', array('!loginradius' => $loginradius_link)) . '</p>';
      $items_list = array(
        t('Social login'),
        t('User profile data'),
        t('Social analytics'),
        t('Eliminating registration process'),
        t('Syncronize social login with traditional login'),
      );
      $output .= theme('item_list', array(
        'items' => $items_list,
        'title' => t('Use'),
      ));
      $items = array(
        l(t('Drupal live demo'), 'http://drupaldemo.loginradius.com/', array('attributes' => array('target' => '_blank'))),
        l(t('Drupal Plugin Documentations'), 'http://www.loginradius.com/developers/Plugins/Drupal', array('attributes' => array('target' => '_blank'))),
        l(t('LoginRadius'), 'http://www.LoginRadius.com/', array('attributes' => array('target' => '_blank'))),
        l(t('Other live demo'), 'https://www.loginradius.com/demo', array('attributes' => array('target' => '_blank'))),
        l(t('Developers'), 'http://www.loginradius.com/developers/gettingstarted/', array('attributes' => array('target' => '_blank'))),
        l(t('LoginRadius blog'), 'http://blog.loginradius.com/', array('attributes' => array('target' => '_blank'))),
        l(t('LoginRadius video'), 'http://www.youtube.com/LoginRadius', array('attributes' => array('target' => '_blank'))),
      );
      $output .= theme('item_list', array(
        'items' => $items,
        'title' => t('Important links'),
      ));
      return $output;
  }
}

/**
 * Delete user at Raas.
 *
 * @param $account
 */
function lr_raas_user_delete($account) {
  $raas_sdk = new LoginradiusRaasSDK();
  $raas_uid = lr_raas_get_raas_uid($account->uid);
  $raas_sdk->RaasUserDelete($raas_uid);
}

/**
 * Update user table and add raas id
 *
 * @param $raas_uid raas uid
 * @param $user_id user id
 */
function lr_raas_update_user_table($raas_uid, $user_id) {
  try {
    db_update('users')
      ->fields(array('lr_raas_uid' => $raas_uid))
      ->condition('uid', $user_id)
      ->execute();
  } catch (Exception $e) {
    watchdog_exception('type', $e);
  }
}

/**
 * Implements hook_user_insert() The module should save its custom additions to the user object into the database
 * Insert user data when New user register via traditional social login.
 *
 * @param array $edit The array of form values submitted by the user
 * @param object $account The user object on which the operation is being performed
 * @param string $category The active category of user information being edited
 */
function lr_raas_user_insert(&$edit, $account, $category) {

  if (user_access('administer site configuration')) {
    if (isset($_POST['op']) && $_POST['op'] == 'Create new account') {
      $raas_sdk = new LoginradiusRaasSDK();
      $params = array(
        'EmailId' => $_POST['mail'],
        'firstname' => $_POST['name'],
        'lastname' => '',
        'password' => $_POST['pass']['pass1']
      );
      $params = array_merge($params, getUpdatedRaasCustomFields());
      $response = $raas_sdk->raasCreateUser($params);
      if (isset($response->Uid) && !empty($response->Uid)) {
        lr_raas_update_user_table($response->Uid, $account->uid);
        lr_social_login_insert_into_mapping_table($response->ID, $response->Provider, $account->uid);
        db_update('users')
          ->fields(array(
            'login' => REQUEST_TIME,
          ))
          ->condition('uid', $account->uid)
          ->execute();
        if (isset($_POST['status']) && $_POST['status'] == "0") {
          lr_raas_block_user($response->Uid);
        }
      }
    }
  }
  if (isset($_SESSION['social_lrdata'])) {
    $userprofile = $_SESSION['social_lrdata'];
    unset($_SESSION['social_lrdata']);

    if (variable_get('user_pictures') == 1 && !empty($userprofile->ImageUrl)) {
      lr_social_login_insert_picture($userprofile->ImageUrl, $account);
    }

    lr_social_login_insert_into_mapping_table($userprofile->ID, $userprofile->Provider, $account->uid);
  }
}

/**
 * Implements hook_js_alter()
 *
 * Unload Social login interface js.
 * @param $js
 */
function lr_raas_js_alter(&$js) {
  $js_path =  drupal_get_path('module', 'lr_social_login') . '/js/sociallogin_interface.js';
  if (isset($js[$js_path])) {
    unset($js[$js_path]);
  }
}

/**
 * hook_preprocess_page()
 *
 * Add Social login Script and Sharing script in all pages.
 *
 * @param $vars variables array
 * @param $hook hook name
 */
function lr_raas_preprocess_page(&$vars, $hook) {      
  $post_value = $_POST;
  $raas_sdk = new LoginradiusRaasSDK();
  if (user_is_logged_in()) {
    global $user;
    $raas_uid = lr_raas_get_raas_uid($user->uid);
    if (isset($post_value['emailid']) && !empty($post_value['emailid']) && isset($post_value['password']) && !empty($post_value['password'])) {
      $params = array(
        'accountid' => $raas_uid,
        'password' => $post_value['password'],
        'emailid' => $post_value['emailid']
      );

      $result = $raas_sdk->createRaasProfile($params);
      $response = $raas_sdk->raasGetRaasProfile($raas_uid);
      lr_social_login_insert_into_mapping_table($response->ID, 'RAAS', $user->uid);
      if (isset($result->isPosted) && $result->isPosted) {
        drupal_set_message(t('Password set successfully.'));
      }
      else {
        $msg = isset($result->description) ? $result->description : 'Password is not set';
        drupal_set_message(t($msg), 'error');
      }
    }
    elseif (isset($post_value['newpassword']) && !empty($post_value['newpassword'])) {
      $provider_user_id = lr_raas_get_raas_user_id($user->uid);
      if (!empty($provider_user_id)) {
        $result = $raas_sdk->raasUpdatePassword(array(
          'newpassword' => $post_value['newpassword'],
          'oldpassword' => $post_value['oldpassword']
        ), $provider_user_id);
        if (isset($result->isPosted) && $result->isPosted) {
          drupal_set_message(t('Password changed successfully.'));
        }
        else {
          $msg = isset($result->description) ? $result->description : 'Password is not changed';
          drupal_set_message(t($msg), 'error');
        }
      }
    }
    elseif (isset($post_value['value']) && $post_value['value'] == 'accountUnLink') {
      if (!empty($raas_uid) && !empty($post_value['provider']) && !empty($post_value['provider'])) {
        $result = $raas_sdk->raasUnlinkAccount($raas_uid, $post_value['provider'], $post_value['providerId']);
        if (isset($result->isPosted) && $result->isPosted) {
          drupal_set_message(t('Account Unlinked successfully'));
        }
        else {
          $msg = isset($result->description) ? $result->description : 'Account has not unlinked';
          drupal_set_message(t($msg), 'error');
        }
      }
    }
  }
  $raas_api_key = trim(variable_get('lr_social_login_apikey'));
  $script = '';

  
if (variable_get('lr_raas_custom_options') != '') {   
   $jsondata = lr_raas_json_validate(variable_get('lr_raas_custom_options')); 
    if (is_object($jsondata)) {               
        foreach($jsondata as $key => $value) {
            $script .= "raasoption.".$key."=";
            if (is_object($value) || is_array($value)) {  
                $encodedStr = json_encode($value);   
                $script.= $encodedStr.';';
            } else {                
            $script .= $value.';';
            }
        }       
    } else {
         if (is_string($jsondata)) {
             $script = $jsondata;
         }
    } 
  } 
  
  $termsconditionhtml = "<p>Accept <a style='font-size: 12px;display: inline;' href='https://www.loginradius.com/loginradius/terms'> Terms</a> and <a href='https://www.loginradius.com/loginradius/privacy' style='font-size: 12px;display: inline;'>Condition</a> By clicking on Register<p>";
  if (variable_get('lr_raas_terms_and_condition_html') != '') {
    $script .= 'raasoption.termsAndConditionHtml = "'. lr_raas_remove_tags_options(variable_get('lr_raas_terms_and_condition_html'), false).'";';
  }else{
     $script .= 'raasoption.termsAndConditionHtml = "'. lr_raas_remove_tags_options($termsconditionhtml, false).'";';
  }

  if (is_numeric(variable_get('lr_raas_form_render_delay')) != '0') {
    $script .= 'raasoption.formRenderDelay =  '.variable_get('lr_raas_form_render_delay') .';';
  }

  $min_length = variable_get('lr_raas_min_password_length');
  $max_length = variable_get('lr_raas_max_password_length');
  if (!empty($min_length) && !empty($max_length)) {
    $password_length = '{min:' . $min_length . ',max:' . $max_length . '}';
    $script .= 'raasoption.passwordlength = '. $password_length.';';
  }
  if (variable_get('lr_raas_v2_recaptcha_site_key') != '') {
    $script .= 'raasoption.V2RecaptchaSiteKey = "'. variable_get('lr_raas_v2_recaptcha_site_key').'";';
  }
  if (variable_get('lr_raas_inform_validation_messages') != '' && variable_get('lr_raas_inform_validation_messages')!= 'false') {
    $script .= 'raasoption.inFormvalidationMessage = '. variable_get('lr_raas_inform_validation_messages').';';
  } 
  if (variable_get('lr_raas_forgot_password_template') != '') {
    $script .= 'raasoption.forgotPasswordTemplate = "'. lr_raas_remove_tags_options(variable_get('lr_raas_forgot_password_template')).'";';
  } 
  
  $emailVerifyOpt = '';
  $emailVerifyOpt = variable_get('lr_raas_email_verification_condition');   
  if(isset($emailVerifyOpt) && $emailVerifyOpt != '') {
  if ($emailVerifyOpt == '0') { 
     if (variable_get('lr_raas_enable_login_on_email_verification') != '' && variable_get('lr_raas_enable_login_on_email_verification')!= 'false') {
     $script .= 'raasoption.enableLoginOnEmailVerification = '. variable_get('lr_raas_enable_login_on_email_verification').';';
     } if (variable_get('lr_raas_prompt_password_on_social_login') != '' && variable_get('lr_raas_prompt_password_on_social_login')!= 'false') {
     $script .= 'raasoption.promptPasswordOnSocialLogin = '. variable_get('lr_raas_prompt_password_on_social_login').';';
     } if (variable_get('lr_raas_enable_user_name') != '' && variable_get('lr_raas_enable_user_name')!= 'false') {
     $script .= 'raasoption.enableUserName = '. variable_get('lr_raas_enable_user_name').';';
     } if (variable_get('lr_raas_ask_email_always_for_unverified') != '' && variable_get('lr_raas_ask_email_always_for_unverified')!= 'false') {
     $script .= 'raasoption.askEmailAlwaysForUnverified = '. variable_get('lr_raas_ask_email_always_for_unverified').';';   
     }
   } elseif ($emailVerifyOpt == '1') { 
     if (variable_get('lr_raas_enable_login_on_email_verification') != '' && variable_get('lr_raas_enable_login_on_email_verification')!= 'false') {
      $script .= 'raasoption.enableLoginOnEmailVerification = '. variable_get('lr_raas_enable_login_on_email_verification').';';
      } if (variable_get('lr_raas_ask_email_always_for_unverified') != '' && variable_get('lr_raas_ask_email_always_for_unverified')!= 'false') {
      $script .= 'raasoption.askEmailAlwaysForUnverified = '. variable_get('lr_raas_ask_email_always_for_unverified').';';
     }
      $script .= 'raasoption.OptionalEmailVerification = true;';
   } elseif ($emailVerifyOpt == '2') {
      $script .= 'raasoption.DisabledEmailVerification = true;';
   }
  }
  
  if (variable_get('lr_raas_email_verification_template') != '') {
        $script .= 'raasoption.emailVerificationTemplate = "'. lr_raas_remove_tags_options(variable_get('lr_raas_email_verification_template')).'";';
  } 
  
  
   drupal_add_js(
      drupal_get_path('module', 'lr_raas') . '/js/LoginRadiusFrontEnd.js',
      array(
        'type' => 'file',
        'scope' => 'header',
        'weight' => 10,
      )
    );  
 
  if (!empty($raas_api_key)) {
    // Set the token in session and close the child window.
    $callback_location = url('user', array('absolute' => TRUE));
    $protocol = stripos($_SERVER['SERVER_PROTOCOL'],'https') === true ? 'https://' : 'http://';
    $homeDomain = $_SERVER['HTTP_HOST'].$GLOBALS['base_path'];
    $fulldomainname = $protocol.$homeDomain;  
      

    drupal_add_library('system', 'ui.datepicker');
    drupal_add_js('//hub.loginradius.com/include/js/LoginRadius.js', array(
      'type' => 'external',
      'scope' => 'header',
      'weight' => 1,
    ));
    drupal_add_js('//cdn.loginradius.com/hub/prod/js/LoginRadiusRaaS.js',
      array(
        'type' => 'external',
        'scope' => 'header',
        'weight' => 2,
      ));
    
    drupal_add_js('
    //initialize raas options
    var raasoption = {};
    var LocalDomain = "' . urldecode(lr_social_login_get_callback_url()) . '";
    var homeDomain = "' . $fulldomainname . '";
raasoption.apikey = "' . $raas_api_key . '";
raasoption.V2Recaptcha = true;
raasoption.emailVerificationUrl = "' . $callback_location . '";
raasoption.forgotPasswordUrl = "' . $callback_location . '";
raasoption.templatename = "loginradiuscustom_tmpl";
raasoption.hashTemplate = true; 
'.$script.'
jQuery(document).ready(function () {
initializeResetPasswordRaasForm(raasoption);
});', array('type' => 'inline', 'scope' => 'header', 'weight' => 4,));
  }
}

/**
 * Check String is json or not.
 *
 * @param $string 
 * @return json|string
 */    
function lr_raas_json_validate($string){
    $result = json_decode($string);
    if (json_last_error() == JSON_ERROR_NONE) {     
        return $result;        
    } else {       
            return $string;       
    }
}

/**
 * Remove html tags, new line and tags.
 *
 * @param $string
 * @param bool $html
 * @return mixed|string
 */
function lr_raas_remove_tags_options($string, $html = TRUE) {
  if ($html) {
    $string = strip_tags($string);
  }
  $string = str_replace(array('<script>', '</script>'), '', $string);
  $string = trim(str_replace('"', "'", $string));
  $string = preg_replace('/[\t]+/', '', preg_replace('/[\r\n]+/', " ", $string));
  return $string;
}
/**
 * Implements hook_block_info().
 *
 * @return array An associative array whose keys define the delta for each block and whose values contain the block descriptions
 */
function lr_raas_block_info() {
  $blocks['lr_admin_login'] = array(
    'info' => t('LoginRadius Admin Login Block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view_alter().
 * @param $data
 * @param $block
 */
function lr_raas_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'lr_admin_login':
      $data['content'] = theme('lr_admin_login');
      break;
    case 'login':
      if (!user_is_logged_in()) {
        $data['content'] = theme('user_login_block');
      }
      else {
        $data['content'] = '';
      }
      break;
  }
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta Which block to render. This is a unique identifier for the block within the module, defined in hook_block_info()
 * @return array Contain block's body and subject
 */
function lr_raas_block_view($delta) {
  $block = array();
  if ($delta == 'lr_admin_login') {
    $block['content'] = '';
  }

  return $block;
}

/**
 * Implement hook get_loginradius_token of social login module.
 *
 * @param $token
 * @param $form
 */
function lr_raas_get_loginradius_token($token, $form) {
  $enable_user_registration = variable_get('lr_social_login_enable_user_registration');
  if ($enable_user_registration == 0) {
    variable_set('lr_social_login_enable_user_registration', 1);
    variable_set('lr_raas_enabled_user_registration', 1);
  }
  $force_user_registration = variable_get('lr_social_login_force_registration');
  if ($force_user_registration == 0) {
    variable_set('lr_social_login_force_registration', 1);
    variable_set('lr_raas_enabled_force_registration', 1);
  }
}

/**
 * Update user data when existing user data save.
 *
 * @param $userprofile
 * @param $account
 */
function lr_raas_add_existing_user_save($userprofile, $account) { 
  drupal_add_js('
  if(sessionStorage.getItem("lr-user-uid") == null){
  sessionStorage.setItem("lr-user-uid", "' . $userprofile->Uid . '");}',
    array('type' => 'inline', 'scope' => 'header'));
  lr_raas_update_user_table($userprofile->Uid, $account->uid);
  if (variable_get('lr_social_login_update_profile') == 1) {
     $data = array();
    lr_raas_field_mapping_create_user($data, $userprofile, $account);
    $existing_user = user_load($account->uid);
    $data = array_merge((array) $existing_user, $data);
    user_save((object) array('uid' => $existing_user->uid), (array) $data);
  }
}


/**
 * Map User Registration Custom Fields in account.
 *
 * @param $form_state
 * @param $userprofile
 */
function lr_raas_field_mapping_create_user(&$form_state, $userprofile, $account) {   
  module_load_include('inc', 'lr_social_login', 'includes/lr_field_mapping');
  $field_map = variable_get('lr_social_login_user_fields', array());

  $instances = field_info_instances('user', 'user');

  foreach ($instances as $field_name => $instance) {
    if (isset($field_map[$field_name])) {
      $temp_parts = explode('|', $field_map[$field_name]);
      if (isset($temp_parts[0]) && $temp_parts[0] == 'raas') {
        $callback = 'lr_raas_field_mapping_field_convert_text';
        $lr_field_mapping_property_name = $temp_parts[1];
        if ($value = $callback($lr_field_mapping_property_name, $userprofile)) {
          $form_state[$field_name][LANGUAGE_NONE][0] = $value;
        }
      }
    }
  }
  if (module_exists('profile2')) {
    $profile_field_map = variable_get('lr_social_login_profile_fields', array());

    foreach ($profile_field_map as $key => $value) {
      $mapped_value[$key] = array_values($value);
    }

    foreach (field_info_instances('profile2') as $field_name => $instances) {
      if (!empty($mapped_value[$field_name]) && strlen(implode($mapped_value[$field_name])) != 0) {
        $profile = profile2_load_by_user($account->uid, $field_name);

        if (!$profile) {
          $profile = profile_create(array(
            'type' => $field_name,
            'uid' => $account->uid
          ));
        }

        foreach ($instances as $instance => $array) {
          $field = field_info_field($array['field_name']);
          if (isset($profile_field_map[$field_name][$array['field_name']])) {
            $profile_temp_parts = explode('|', $profile_field_map[$field_name][$array['field_name']]);
            if (isset($profile_temp_parts[0]) && $profile_temp_parts[0] == 'raas') {

              $callback = 'lr_raas_field_mapping_field_convert_text';
              $lr_field_mapping_property_name = $profile_temp_parts[1];
              $value = $callback($lr_field_mapping_property_name, $userprofile, $field, $array);
              $profile->{$array['field_name']}[LANGUAGE_NONE][0]['value'] = $value; // Department info got from 3rd party site.
              $form_state['values']['profile_' . $field_name] = array();
              $form = array();
              $form['#parents'] = array();
              field_attach_submit('profile2', $profile, $form, $form_state); // Attach $profile to profile2 submit.
              $profile->bundle = $field_name; // Main is the profile type which is created in step 3.
              profile2_save($profile);
            }
          }
        }
      }
    }
  }
}

/**
 * Implement hook add_user_data_after_save of social login.
 *
 * @param $account
 * @param $userprofile
 */
function lr_raas_add_user_data_after_save($account, $userprofile) {  
  if (variable_get('lr_raas_enabled_user_registration') == 1) {
    variable_del('lr_social_login_enable_user_registration');
    variable_del('lr_raas_enabled_user_registration');
  }
  if (variable_get('lr_raas_enabled_force_registration') == 1) {
    variable_del('lr_social_login_force_registration');
    variable_del('lr_raas_enabled_force_registration');
  }
  drupal_add_js('
  if(sessionStorage.getItem("lr-user-uid") == null){
  sessionStorage.setItem("lr-user-uid", "' . $userprofile->Uid . '");}',
    array('type' => 'inline', 'scope' => 'header'));
  lr_raas_update_user_table($userprofile->Uid, $account->uid);
  $data = array();
  $existing_user = user_load($account->uid);
  lr_raas_field_mapping_create_user($data, $userprofile, $account);
  $data = array_merge((array) $existing_user, $data);
  user_save((object) array('uid' => $existing_user->uid), (array) $data);
}

function lr_raas_check_raas_uid($userprofile) {
  if (!empty($userprofile->Uid)) {
    $uid = db_query("SELECT uid FROM {users} WHERE lr_raas_uid = :lr_raas_uid", array(
      ':lr_raas_uid' => $userprofile->Uid,
    ))->fetchField();

    if ($uid) {
      return user_load($uid);
    }
  }
  return FALSE;
}

/**
 * Convert text and text_long data.
 *
 * @param string $lr_field_mapping_property_name User profile property name thorugh which data mapped
 * @param object $userprofile User profile data that you got from social network
 * @param string User field name stored in database
 * @param string $instance Field instance
 * @return array  Contain value of field map data
 */
function lr_raas_field_mapping_field_convert_text($lr_field_mapping_property_name, $userprofile) {
  $value = NULL;
  if (isset($userprofile->CustomFields->$lr_field_mapping_property_name)) {
    if (is_string($userprofile->CustomFields->$lr_field_mapping_property_name)) {
      $value = $userprofile->CustomFields->$lr_field_mapping_property_name;
    }
  }

  return $value ? array('value' => $value) : NULL;
}

/**
 * After user save , save data in raas and all funtionality handle by raas.
 *
 * @param $account
 * @param $userprofile
 * @return array
 */
function lr_raas_check_send_verification_email($account, $userprofile) {
  $form = (!empty($form) ? $form : "");
  db_update('users')
    ->fields(array(
      'status' => 1,
    ))
    ->condition('uid', $account->uid)
    ->execute();
  watchdog('lr_social_login', 'New user: %name (%email).', array(
    '%name' => $account->name,
    '%email' => $account->mail
  ), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));

  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
  unset($_SESSION['lrdata']);
  $_SESSION['current_social_provider'] = $userprofile->ID;
  return lr_social_login_user_redirect($form, $account, $userprofile, 'lr_social_login_userlogin_redirect');
}

/**
 * Add login interface at comment form.
 *
 * @param $form
 * @param $form_state
 */
function lr_raas_form_comment_form_alter(&$form, &$form_state) {
  if (variable_get('lr_social_login_commenting_enable') == 1) {
    if (user_is_logged_in()) {
      return;
    }
    $form['lr_social_login_links']['#markup'] = theme('raas_social_widget_container');
  }
}

/**
 * Add Mapping fields in mailchimp mapping fields.
 *
 * @param $mappingfields
 * @return array
 */
function lr_raas_lr_add_mapping_fields($mappingfields) {
  $raas_sdk = new LoginradiusRaasSDK();
  $fields = $raas_sdk->raasGetCustomFields();
  if (!empty($fields) && count($fields) > 0) {
    $properties = $fields;
    $property_options = array();
    foreach ($properties as $property => $property_info) {
      $property_options['raas|' . $property] = $property;
    }
    $result = array(
      t('LoginRadius Data') => $mappingfields,
      t('User Registration Custom Fields') => $property_options,
    );
    return $result;
  }
}

/**
 * Get User Registration Custom Fields values for mailchimp field mapping.
 *
 * @param $temp_merge_vars
 * @param $userprofile
 * @return array
 */
function lr_raas_lr_add_mapping_mailchimp_field($temp_merge_vars, $userprofile) {
  $merge_vars = array();
  foreach ($temp_merge_vars as $temp_merge_var) {
    $mailchimp_merger_var_field = variable_get('mailchimp_merge_var_' . $temp_merge_var['tag']);
    if (isset($mailchimp_merger_var_field)) {
      $temp_parts = explode('|', $mailchimp_merger_var_field);
      if ($temp_parts[0] == 'raas') {
        $merge_vars[$temp_merge_var['tag']] = isset($userprofile->CustomFields->$temp_parts[1]) ? $userprofile->CustomFields->$temp_parts[1] : '';
      }
    }
  }
  return $merge_vars;
}

/**
 * Alter form option when Raas enabled.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return mixed
 */
function lr_raas_form_lr_social_login_lr_advance_settings_alter(&$form, &$form_state, $form_id) {  
  $instances = field_info_instances('user', 'user');
  $raas_sdk = new LoginradiusRaasSDK();
  $fields = $raas_sdk->raasGetCustomFields();
  if (!empty($fields) && count($fields) > 0) {
    $properties = $fields;
    $property_options = array();

    foreach ($properties as $property => $property_info) {
      $property_options['raas|' . $property] = $property;
    }
    foreach ($instances as $field_name => $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['type'] == 'text') {
        $value = $form['fieldmap']['lr_social_login_user_fields'][$field_name]['#options'];
        $form['fieldmap']['lr_social_login_user_fields'][$field_name]['#options'] = array(
          t('LoginRadius Data') => $value,
          t('User Registration Custom Fields') => $property_options,
        );
      }
    }
    if (module_exists('profile2')) {
      foreach (field_info_instances('profile2') as $field_name => $instances) {
        foreach ($instances as $instance => $array) {
          $field = field_info_field($array['field_name']);
          if ($field['type'] == 'text') {
            $value = $form['fieldmap']['lr_social_login_profile_fields'][$field_name][$array['field_name']]['#options'];
            $form['fieldmap']['lr_social_login_profile_fields'][$field_name][$array['field_name']]['#options'] = array(
              t('LoginRadius Data') => $value,
              t('User Registration Custom Fields') => $property_options,
            );
          }
        }
      }
    }
  }

  $form['interface_settings']['#title'] = t('User Registration interface customization');
  $form['interface_display_settings']['#title'] = t('User Registration interface display settings');
  $form['user_settings']['#title'] = t(' User Registration additional settings');
  $form['fieldmap']['#title'] = t(' User Registration field mapping');
  unset($form['user_settings']['lr_social_login_email_required']);
  unset($form['user_settings']['lr_social_login_emailrequired_popup_wrong']);
  unset($form['user_settings']['lr_social_login_skip_email_verification']);
  unset($form['user_settings']['lr_social_login_send_user_credentials']);
  unset($form['user_settings']['lr_social_login_email_content']);
  unset($form['user_settings']['lr_social_login_enable_user_registration']);
  unset($form['user_settings']['lr_social_login_force_registration']);
  unset($form['user_settings']['lr_social_login_emailrequired_popup_text']);
  unset($form['user_settings']['lr_social_login_emailrequired_popup_wrong']);
  unset($form['interface_settings']['lr_social_login_interface_size']);
  unset($form['interface_settings']['lr_social_login_interface_columns']);
  unset($form['interface_settings']['lr_social_login_interface_bgcolor']);
  unset($form['interface_display_settings']);
  $user_settings_group = 'user_settings';
  $form[$user_settings_group]['lr_raas_inform_validation_messages'] = array(
    '#type' => 'radios',
    '#title' => t('Do you want to display form validation message on authentication pages?'),
    '#default_value' => variable_get('lr_raas_inform_validation_messages', 'false'),
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),
    '#description' => t('Form validation includes checking for username and password lengths, password complexity, etc.')
  );
  $form[$user_settings_group]['lr_raas_terms_and_condition_html'] = array(
    '#type' => 'textarea',
    '#title' => t('Enter text to be displayed under the Terms and Condition on the registration page'),
    '#rows' => 2,
    '#default_value' => variable_get('lr_raas_terms_and_condition_html', ''),    
    '#attributes' =>array('placeholder' => t('terms and conditon text'))
  );
  $form[$user_settings_group]['lr_raas_form_render_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter delay time to generate authentication pages'),
    '#default_value' => variable_get('lr_raas_form_render_delay', ''),
    '#description' => t('Recommended for content heavy sites where page loading time is longer due to lots of images, videos, etc. on the page.'),
    '#element_validate' => array('element_validate_number'),
    '#attributes' =>array('placeholder' => t('100'))
  );

  $form[$user_settings_group]['lr_raas_min_password_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter desired minimum length for password?'),
    '#default_value' => variable_get('lr_raas_min_password_length', ''),
    '#element_validate' => array('element_validate_number'),
    '#attributes' =>array('placeholder' => t('8'))
  );
  $form[$user_settings_group]['lr_raas_max_password_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter desired maximum length for password?'),
    '#default_value' => variable_get('lr_raas_max_password_length', ''),
    '#description' => t('If you want to set password length validation then set both minimum and maximum password length, otherwise it will not work.'),
    '#element_validate' => array('element_validate_number'),
    '#attributes' =>array('placeholder' => t('32'))
  );

  $form[$user_settings_group]['lr_raas_v2_recaptcha_site_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Google reCaptcha public key'),
    '#default_value' => variable_get('lr_raas_v2_recaptcha_site_key', ''),    
    '#attributes' =>array('placeholder' => t('google recaptcha key'))
  );
  $form[$user_settings_group]['lr_raas_forgot_password_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter template name for forgot password email'),
    '#default_value' => variable_get('lr_raas_forgot_password_template', ''),  
    '#attributes' =>array('placeholder' => t('template name'))
  );
  $form[$user_settings_group]['lr_raas_email_verification_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter template name for email verification email'),
    '#default_value' => variable_get('lr_raas_email_verification_template', ''),  
    '#attributes' =>array('placeholder' => t('template name'))
  );  
  $form[$user_settings_group]['lr_raas_custom_options'] = array(
    '#type' => 'textarea',
    '#title' => t('Please enter custom user registration options for LoginRadius interface.'),
    '#id' => 'add_custom_options',
    '#rows' => 4,
    '#default_value' => variable_get('lr_raas_custom_options', ''),    
    '#attributes' => array(
    'placeholder' => t('raas custom option'),
    'onchange' => "lrCheckValidJson();",
   ),      
   );
   $form[$user_settings_group]['lr_raas_email_verification_condition'] = array(
    '#type' => 'radios',
    '#id' => 'email_verification_options',
    '#title' => t('Select your desired email verification option during the registration process.'),
    '#default_value' => variable_get('lr_raas_email_verification_condition', 0),
    '#options' => array( 
      0 => t('Required Email Verification'),
      1 => t('Optional Email Verification'),     
      2 => t('Disabled Email Verification')     
    ), 
    '#attributes' => array(
    'onchange' => "showAndHideUI();",
  ),
  );
   
  $form[$user_settings_group]['lr_raas_enable_login_on_email_verification'] = array(
    '#type' => 'radios',
    '#title' => t('Do you want to enable login upon email verification?'),
    '#default_value' => variable_get('lr_raas_enable_login_on_email_verification', 'false'),
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),   
  );
     
  $form[$user_settings_group]['lr_raas_prompt_password_on_social_login'] = array(
    '#type' => 'radios',
    '#id' => 'prompt_password',
    '#title' => t('Do you want to prompt for password after registration with social provider?'),
    '#default_value' => variable_get('lr_raas_prompt_password_on_social_login', 'false'),
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),   
  );
  
  $form[$user_settings_group]['lr_raas_enable_user_name'] = array(
    '#type' => 'radios',
    '#title' => t('Do you want to enable login with username?'),
    '#default_value' => variable_get('lr_raas_enable_user_name', 'false'),
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),    
  );
  $form[$user_settings_group]['lr_raas_ask_email_always_for_unverified'] = array(
    '#type' => 'radios',
    '#title' => t('Do you want to ask for email every time an unverified user tries to log in?'),
    '#default_value' => variable_get('lr_raas_ask_email_always_for_unverified', 'false'),
    '#options' => array(
      'true' => t('Yes, (ask for email address every time an unverified user logs in)'),
      'false' => t('No'),
    ),    
  );
  return $form;
}


/**
 * Alter social login form option when raas enabled.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return mixed
 */
function lr_raas_form_lr_social_login_admin_settings_alter(&$form, &$form_state, $form_id) {
  
  $form['basic']['#title'] = t('User Registration basic settings');
  unset($form['basic']['lr_social_login_disable_traditional_login']);
  unset($form['basic']['lr_social_login_userregister_redirect']);
  unset($form['basic']['lr_social_login_userregister_redirect']['lr_social_login_custom_register_redirection']);

  return $form;
}

/**
 * Implementation of hook_menu_alter().
 */
function lr_raas_menu_alter(&$items) {
  $items ['admin/config/people/userregistration/settings']['title'] = t('User Registration');  
}