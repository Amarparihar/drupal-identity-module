<?php

/**
 * @file
 * Enables the use of personal and site-wide contact forms.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Entity\EntityTypeInterface;
use \LoginRadiusSDK\Utility\Functions;
use \LoginRadiusSDK\LoginRadiusException;
use \LoginRadiusSDK\Clients\IHttpClient;
use \LoginRadiusSDK\Clients\DefaultHttpClient;
use \LoginRadiusSDK\Utility\SOTT;
use \LoginRadiusSDK\Advance\CloudAPI;
use \LoginRadiusSDK\CustomerRegistration\Social\SocialLoginAPI;
use \LoginRadiusSDK\CustomerRegistration\Authentication\UserAPI;
use \LoginRadiusSDK\CustomerRegistration\Management\AccountAPI;

module_load_include('php', 'lr_ciam', 'customhttpclient');
global $apiClient_class;
$apiClient_class = 'CustomHttpClient';

/**
 * Implements hook_theme().
 *
 * @return array
 */
function lr_ciam_theme() {
    $path = drupal_get_path('module', 'lr_ciam') . '/theme';
    $theme = array(
      'user_login_form' => array(
        'template' => 'user_login_form',
        'render element' => 'form',
        'path' => $path,
      ),
      'user_login' => array(
        'template' => 'user_login',
        'render element' => 'form',
        'path' => $path,
      ),
      'user_register' => array(
        'template' => 'user_register',
        'render element' => 'form',
        'path' => $path,
      ),
      'user_register_form' => array(
        'template' => 'user_register_form',
        'render element' => 'form',
        'path' => $path,
      ),
      'set_password' => array(
        'template' => 'set_password',
        'render element' => 'form',
        'path' => $path,
      ),
      'change_password' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'change_password',
        'path' => $path,
      ),      
      '2fa_container' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => '2fa_container',
        'path' => $path,
      ),
      'lr_update_phone' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'lr_update_phone',
        'path' => $path,
      ),
      'lr_backup_codes' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'lr_backup_codes',
        'path' => $path,
      ),
      'remove_email' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'remove_email',
        'path' => $path,
      ),
      'add_email' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'add_email',
        'path' => $path,
      ),
       'user_pass_form' => array(
        'template' => 'user_pass_form',
        'render element' => 'form',
        'path' => $path,
      ),   
      'user_pass' => array(
        'template' => 'user_pass',
        'render element' => 'form',
        'path' => $path,
      ),
      'ciam_social_widget_container' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'ciam_social_widget_container',
        'path' => $path,
      ),
      'lr_ciam_linked' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'lr_ciam_linked',
        'path' => $path,
      ),
      'lr_ciam_popup' => array(
        'variables' => array(
          'params' => NULL,
        ),
        'template' => 'lr_ciam_popup',
        'path' => $path,
      ),
      'lr_loading' => array(
        'template' => 'lr_loading',
        'variables' => array(
          'params' => NULL,
        ),
        'path' => $path,
      ),
      'lr_message' => array(
        'template' => 'lr_message',
        'variables' => array(
          'params' => NULL,
        ),
        'path' => $path,
      ),
    );
    return $theme;
}

/**
 * Added Required variable to use in template fie.
 *
 * @param $vars
 */
function template_preprocess_lr_ciam_linked(&$vars) {
    global $base_url;
    $vars['currentid'] = $_SESSION['_sf2_attributes']['lrID'];
    $vars['image_url'] = $base_url . '/' . drupal_get_path('module', 'lr_ciam') . '/images';
    $vars['callback'] = lr_ciam_get_callback_url();
}

/**
 * Show and hide user pass form block.
 *
 * @param $variables
 */
function template_preprocess_user_pass(&$variables) {
    $config = \Drupal::config('lr_ciam.settings');
    $variables['api_key'] = trim($config->get('api_key'));
       
    $blocks = \Drupal\block\Entity\Block::loadMultiple();
        foreach ($blocks as $key => $block) {       
        $settings = $block->get('settings'); 
        if($key == 'userforgotpasswordblock'){  
            $block_settings = array();
            $block_settings = $settings;
        } 
    }    
     
    $variables['link_login'] = isset($block_settings['forgot_block_link_login']) ? $block_settings['forgot_block_link_login'] : ''; 
    $variables['link_register'] = isset($block_settings['forgot_block_link_register']) ? $block_settings['forgot_block_link_register'] : ''; 
}

/**
 * Show and hide user pass form.
 *
 * @param $variables
 */
  
function template_preprocess_user_pass_form(&$variables) {
    $config = \Drupal::config('lr_ciam.settings');
    $variables['api_key'] = trim($config->get('api_key'));
    if (!\Drupal::currentUser()->isAnonymous()) {
        $variables['showpassonlogin'] = false;
        $variables['rendered'] = drupal_render_children($variables['form']);
    }
    else {
        $variables['showpassonlogin'] = true;
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 * 
 * return $form
 */
function lr_ciam_form_user_pass_form_alter(&$form, FormStateInterface $form_state) {
    if (!\Drupal::currentUser()->isAnonymous()) {
        $user = \Drupal::currentUser();
        $form['name']['#type'] = 'value';
        $form['name']['#value'] = $user->getEmail();
        $form['mail'] = array(
          '#prefix' => '<p>',
          '#markup' => t('Password reset instructions will be mailed to %email. You must log out to use the password reset link in the email.', array('%email' => $user->getEmail())),
          '#suffix' => '</p>',
        );

        $form['actions'] = array('#type' => 'actions');
        $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
        $form['#cache']['contexts'][] = 'url.query_args';
        return $form;
    }
}

/**
 * Add variable to register form.
 *
 * @param $variables
 * 
 */
function template_preprocess_user_register_form(&$variables) {
    $variables['admin_access'] = true;
    $user = \Drupal::currentUser()->getRoles();
    if (in_array("administrator", $user)) {
        $variables['admin_access'] = false;
    }
    $config = \Drupal::config('lr_ciam.settings');
    $variables['interface_label'] = $config->get('interface_label');
    $variables['api_key'] = trim($config->get('api_key'));
    $variables['rendered'] = drupal_render_children($variables['form']);
}

/**
 * Add variable to user register form block.
 *
 * @param $variables
 */

function template_preprocess_user_register(&$variables) {
    $variables['admin_access'] = true;
    $user = \Drupal::currentUser()->getRoles();
    if (in_array("administrator", $user)) {
        $variables['admin_access'] = false;
    }
    $config = \Drupal::config('lr_ciam.settings');
    $blocks = \Drupal\block\Entity\Block::loadMultiple();
        foreach ($blocks as $key => $block) {       
        $settings = $block->get('settings'); 
        if($key == 'userregisterblock'){  
            $block_settings = array();
            $block_settings = $settings;
        } 
     }    
     
    $variables['link_login'] = isset($block_settings['register_block_link_login']) ? $block_settings['register_block_link_login'] : ''; 
    $variables['link_forgot'] = isset($block_settings['register_block_link_forgot']) ? $block_settings['register_block_link_forgot'] : ''; 
    $variables['interface_label'] = $config->get('interface_label');
    $variables['api_key'] = trim($config->get('api_key'));
    $variables['rendered'] = drupal_render_children($variables['form']);
}

/**
 * Get pop up title.
 *
 * @param $variables
 * 
 */
function template_preprocess_lr_ciam_popup(&$variables) {
    $config = \Drupal::config('lr_ciam.settings');
    $variables['popup_title'] = $config->get('popup_title');
}

/**
 * Implements hook_preprocess().
 *
 * @param $variables
 * 
 */
function lr_ciam_preprocess(&$variables) {
    $variables['image_path'] = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'lr_ciam') . '/images/loading.png';
}

/**
 * Add variable to user login form.
 *
 * @param $variables
 * 
 */
function template_preprocess_user_login_form(&$variables) {
    $config = \Drupal::config('lr_ciam.settings');
    $variables['interface_label'] = $config->get('interface_label');
    $variables['api_key'] = trim($config->get('api_key'));
}

/**
 * Add variable to user login form block.
 *
 * @param $variables
 */
function template_preprocess_user_login(&$variables) {    
    $config = \Drupal::config('lr_ciam.settings');
    
    $blocks = \Drupal\block\Entity\Block::loadMultiple();
        foreach ($blocks as $key => $block) {       
        $settings = $block->get('settings');  
        if($key == 'userloginblock'){  
            $block_settings = array();
            $block_settings = $settings;
        } 
     }
 
    $variables['interface_label'] = $config->get('interface_label');
    $variables['api_key'] = trim($config->get('api_key'));  
    $variables['link_register'] = isset($block_settings['login_block_link_register']) ? $block_settings['login_block_link_register'] : ''; 
    $variables['link_forgot'] = isset($block_settings['login_block_link_forgot']) ? $block_settings['login_block_link_forgot'] : ''; 
}

/**
 * Get provider name.
 *
 * @param $userprofile
 * @param $token
 * 
 * return array
 */
function lr_ciam_add_loginradius_userdata($userprofile, $token) {    
    $provider =  isset($userprofile->Provider) ? $userprofile->Provider : '';
    \Drupal::service('session')->set('provider', $provider);         
}


/**
 * Implements hook_page_attachment().
 *
 * @param $page
 */
function lr_ciam_page_attachments(&$page) {
    $config = \Drupal::config('lr_ciam.settings');
    if (isset($_COOKIE['lr_message']) && $_COOKIE['lr_message'] != '') {
        $sec = $config->get('ciam_auto_hide_messages');
        $message = isset($_COOKIE['lr_message']) ? $_COOKIE['lr_message'] : '';                       
        $response = (isset($_GET['lrresponse']) && $_GET['lrresponse'] != 'true') ? "error" : "success" ;
        setcookie("lr_message", "", time() - 3600, "/");
        if($message!= ""){
            if($response == 'error'){
                drupal_set_message($message, $response);
                if($sec != '' && $sec != '0'){
                    header("Refresh:$sec");
                }
            } else {
                drupal_set_message($message);   
                if($sec != '' && $sec != '0'){
                    header("Refresh:$sec");
                }
            }
        }                            
    }
    $user = \Drupal::currentUser();
    $emailVerificationUrl = Url::fromRoute('<front>')->setAbsolute()->toString();
    $forgotVerificationUrl = Url::fromRoute('user.login')->setAbsolute()->toString();

    $path = parse_url(Url::fromRoute('<front>')->toString());
    $sso_path = $path['path'];
    $loggedIn = true;
    if (\Drupal::currentUser()->isAnonymous()) {
        $loggedIn = false;
    }    
   
    $my_settings = array(
      'verificationUrl' => $emailVerificationUrl,
      'resetPasswordUrl' => $forgotVerificationUrl,
      'loggedIn' => $loggedIn,
      'accessToken' => isset($_SESSION['_sf2_attributes']['access_token']) ? $_SESSION['_sf2_attributes']['access_token'] : '',
      'phoneId' => isset($_SESSION['_sf2_attributes']['phoneId']) ? $_SESSION['_sf2_attributes']['phoneId'] : '',
      'appName' => trim($config->get('sso_site_name')),
      'apiKey' => trim($config->get('api_key')),  
      'autoHideTime' => trim($config->get('ciam_auto_hide_messages')),     
      'appPath' => trim($sso_path),
      'callback' => urldecode(lr_ciam_get_callback_url()),
      'home' => Url::fromRoute('<front>')->setAbsolute()->toString()
    );

    if ($config->get('ciam_terms_and_condition_html') != '') {
        $my_settings['termsAndConditionHtml'] = $config->get('ciam_terms_and_condition_html');
    }  
    if ($config->get('ciam_ask_required_fields_on_traditional_login') != '' && $config->get('ciam_ask_required_fields_on_traditional_login') != 'false') {
        $my_settings['askRequiredFieldForTraditionalLogin'] = (boolean) $config->get('ciam_ask_required_fields_on_traditional_login');
    }
    if ($config->get('ciam_display_password_strength') != '' && $config->get('ciam_display_password_strength') != 'false') {
        $my_settings['displayPasswordStrength'] = (boolean) $config->get('ciam_display_password_strength');
    }   
    if ($config->get('ciam_ask_email_for_unverified_user_login') != '' && $config->get('ciam_ask_email_for_unverified_user_login') != 'false') {
        $my_settings['askEmailForUnverifiedProfileAlways'] = (boolean) $config->get('ciam_ask_email_for_unverified_user_login');
    }
    if ($config->get('ciam_user_name_login') != '' && $config->get('ciam_user_name_login') != 'false') {
        $my_settings['usernameLogin'] = (boolean) $config->get('ciam_user_name_login');
    }
    if ($config->get('ciam_prompt_password_on_social_login') != '' && $config->get('ciam_prompt_password_on_social_login') != 'false') {
        $my_settings['promptPasswordOnSocialLogin'] = (boolean) $config->get('ciam_prompt_password_on_social_login');
    }
    if ($config->get('ciam_check_phone_no_availability') != '' && $config->get('ciam_check_phone_no_availability') != 'false') {
        $my_settings['existPhoneNumber'] = (boolean) $config->get('ciam_check_phone_no_availability');
    }
    if ($config->get('ciam_instant_link_login') != '' && $config->get('ciam_instant_link_login') != 'false') {
        $my_settings['instantLinkLogin'] = (boolean) $config->get('ciam_instant_link_login');
    }
    if ($config->get('ciam_instant_otp_login') != '' && $config->get('ciam_instant_otp_login') != 'false') {
        $my_settings['instantOTPLogin'] = (boolean) $config->get('ciam_instant_otp_login');
    }
    
    $request_uri = \Drupal::request()->getRequestUri();
    $sott = '';
    if (strpos($request_uri, 'register') !== FALSE) {
        $sott = lr_ciam_get_sott($config->get('api_key'), $config->get('api_secret'));       
    }
    $my_settings['sott'] = $sott;
    if ($config->get('ciam_debug_mode') != '' && $config->get('ciam_debug_mode') != 'false') {
        $my_settings['debugMode'] = (boolean) $config->get('ciam_debug_mode');
    }
    if ($config->get('ciam_welcome_email_template') != '') {
        $my_settings['welcomeEmailTemplate'] = $config->get('ciam_welcome_email_template');
    }
    if ($config->get('ciam_email_verification_template') != '') {
        $my_settings['verificationEmailTemplate'] = $config->get('ciam_email_verification_template');
    }  
    if ($config->get('ciam_reset_password_email_template') != '') {
        $my_settings['resetPasswordEmailTemplate'] = $config->get('ciam_reset_password_email_template');
    }     
    if ($config->get('ciam_instant_link_login_email_template') != '') {
        $my_settings['instantLinkLoginEmailTemplate'] = $config->get('ciam_instant_link_login_email_template');
    }                  
    if ($config->get('ciam_welcome_sms_template') != '') {
        $my_settings['smsTemplateWelcome'] = $config->get('ciam_welcome_sms_template');
    }
    if ($config->get('ciam_sms_template_phone_verification') != '') {
        $my_settings['smsTemplatePhoneVerification'] = $config->get('ciam_sms_template_phone_verification');
    }
    if ($config->get('ciam_sms_template_reset_password') != '') {
        $my_settings['smsTemplateForgot'] = $config->get('ciam_sms_template_reset_password');
    }
    if ($config->get('ciam_sms_template_change_phone_no') != '') {
        $my_settings['smsTemplateChangePhoneNo'] = $config->get('ciam_sms_template_change_phone_no');
    }
    if ($config->get('ciam_sms_template_one_time_passcode') != '') {
        $my_settings['smsTemplateInstantOTPLogin'] = $config->get('ciam_sms_template_one_time_passcode');
    }           
    if ($config->get('ciam_sms_template_2fa') != '') {
        $my_settings['smsTemplate2FA'] = $config->get('ciam_sms_template_2fa');
    }  

    if ($config->get('ciam_custom_options') != '') {
        $my_settings['customScript'] = "";
        $jsondata = lr_ciam_json_validate($config->get('ciam_custom_options'));
        if (is_object($jsondata)) {
            foreach ($jsondata as $key => $value) {
                $my_settings['customScript'] .= "commonOptions." . $key . "=";
                if (is_object($value) || is_array($value)) {
                    $encodedStr = json_encode($value);
                    $my_settings['customScript'] .= $encodedStr . ';';
                }
                else {
                    $my_settings['customScript'] .= '"' . $value . '"' . ';';
                }
            }
        }
        else {
            if (is_string($jsondata)) {
                $my_settings['customScript'] = $jsondata;
            }
        }
    }
    
    $page['#attached']['drupalSettings']['ciam'] = $my_settings;
    $page['#attached']['library'][] = 'lr_ciam/drupal.ciam_core';
    $page['#attached']['library'][] = 'lr_ciam/drupal.ciam_custom';
}

/**
 * Generate sott.
 *
 * @param $apiKey 
 * @param $apiSecret 
 * @return json|string
 */

function lr_ciam_get_sott($apiKey, $apiSecret) {
    if ($apiKey != '' && $apiSecret != '') {
        $sottObj = new SOTT($apiKey, $apiSecret, array('output_format' => 'json'));
        try {  
            $result = $sottObj->encrypt('10');
            return isset($result->Sott) ? $result->Sott : '';
        }
        catch (LoginRadiusException $e) {
             \Drupal::logger('ciam')->error($e);
        }
    }
}

/**
 * Check String is json or not.
 *
 * @param $string 
 * @return json|string
 */
function lr_ciam_json_validate($string) {
    $result = json_decode(str_replace("'", '"', $string));
    if (json_last_error() == JSON_ERROR_NONE) {
        return $result;
    }
    else {
        return $string;
    }
}

/**
 * hook_mail.
 *
 * @param $key
 * @param $message 
 * @param $params 
 * @return json|string
 */
function lr_ciam_mail($key, &$message, $params) {
    $data['user'] = $params['account'];
    $options['langcode'] = $message['langcode'];
    user_mail_tokens($variables, $data, $options);
    switch ($key) {
        case 'welcome_email':
            $message['subject'] = t('Thank you for registering at @site', $variables, $options);
            $message['body'][] = t("Thank you for registering at @site.

You will be able to login in the future using

Username : @username
Password : @pass

--  [site:name] team", $variables, $options);
            break;
    }
}

/**
 * Get Callback Url For Social Login Interface.
 *
 * @return string
 */
function lr_ciam_get_callback_url() {
    global $base_url;
    $destination = (\Drupal::destination()->getAsArray());
    $callback = $destination['destination'];

    if (strpos($callback, 'ajax') !== FALSE)  {
        if (isset($_SESSION['redirect_url'])) {
            return $_SESSION['redirect_url'];
        }
        else {
            $callback = Url::fromRoute('user');
        }
    }

    $url = Url::fromUserInput('/user/ciamlogin', array(
          'query' => array('destination' => $callback),
          'absolute' => TRUE,
        ))->toString();

    $request_uri = \Drupal::request()->getRequestUri();
    if (strpos($request_uri, 'redirect_to') !== FALSE) {
        $vid = \Drupal::request()->query->get('redirect_to');
        $url .= "&redirect_to=" . urldecode($vid);
    }
    $parseURL = parse_url($base_url);
    $HTTP_REFERER = isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : '';
    if (isset($parseURL['host']) && !empty($parseURL['host']) && (strpos($HTTP_REFERER, $parseURL['host']) !== false)) {
        $_SESSION['referer_url'] = $_SERVER["HTTP_REFERER"];
    }
    return urlencode($url);
}

/**
 * Update user data after save.
 * 
 * @param $user
 * @param $userprofile
 */
function lr_ciam_add_user_data_after_save($user, $userprofile) {
    $user_manager = \Drupal::service('lr_ciam.user_manager');
    $user_manager->lr_ciam_update_user_table($userprofile->Uid, $user->id());
}

/**
 * 
 * Implements hook_user_insert().
 * 
 * @param $account
 * 
 */
function lr_ciam_user_insert($account) {
    
    $user = \Drupal::currentUser()->getRoles();
    if (in_array("administrator", $user)) {

        if (isset($_POST['op']) && $_POST['op'] == 'Create new account') {
            $user_manager = \Drupal::service('lr_ciam.user_manager');
            $params = '{
            "Email":[
               {
                  "Type":"Primary",
                  "Value":"'.$_POST['mail'].'"
               }
            ],
            "UserName":"'.$_POST['name'].'",
            "Password":"'.$_POST['pass']['pass1'].'"
            }';   

            $response = $user_manager->lr_ciam_create_user($params);
            if (isset($response->Uid) && !empty($response->Uid)) {
                
                \Drupal\Core\Database\Database::getConnection()->update('users_field_data')
                    ->fields(array(
                      'login' => REQUEST_TIME,
                    ))
                    ->condition('uid', $account->id())
                    ->execute();
                $user_manager->lr_ciam_update_user_table($response->Uid, $account->id());

                if (isset($_POST['notify']) && $_POST['notify'] == '1') {
                    try {
                        $forgotVerificationUrl = Url::fromRoute('user.login')->setAbsolute()->toString(); 
                        $result = $user_manager->lr_ciam_forgot_password(trim($_POST['mail']), $forgotVerificationUrl);                        
      
                        if (isset($result->IsPosted) && $result->IsPosted) {
                            drupal_set_message(t('A welcome message with further instructions has been emailed to the new user <a href=":url">%name</a>.', array(':url' => $account->url(), '%name' => $_POST['name'])));
                        }
                    }
                    catch (LoginRadiusException $e) {
                        $msg = isset($e->getErrorResponse()->description) ? $e->getErrorResponse()->description : 'error';
                        drupal_set_message(t($msg), 'error');
                        $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
                        $response->send();
                        exit();
                    }
                }
                if (isset($_POST['status']) && $_POST['status'] == "0") {
                    $user_manager->lr_ciam_block_user($response->Uid);
                }
            }
        }
    }
}

/**
 * Implements hook_user_presave().
 * 
 * @param $account
 * 
 */

function lr_ciam_user_presave($account) {
    $user_manager = \Drupal::service('lr_ciam.user_manager');
    $ciam_uid = $user_manager->lr_ciam_get_ciam_uid($account->id());
    $ciam_uname = $user_manager->lr_ciam_get_ciam_uname($account->id());
    $config = \Drupal::config('lr_ciam.settings');
    $apiKey = trim($config->get('api_key'));
    $apiSecret = trim($config->get('api_secret'));    

        if (isset($_POST['op']) && $_POST['op'] == 'Save') {
            if (isset($_POST['form_id']) && $_POST['form_id'] == 'user_form') {
                if (isset($_POST['name']) && $_POST['name'] != '') {

                    if ($ciam_uname != $_POST['name']) {
                        $params = '{            
                          "UserName":"' . $_POST['name'] . '"          
                          }';
                        try {
                            $accountObject = new AccountAPI($apiKey, $apiSecret, array('output_format' => 'json'));
                            $accountObject->update($ciam_uid, $params);
                        }
                        catch (LoginRadiusException $e) {                          
                            $msg = isset($e->getErrorResponse()->description) ? $e->getErrorResponse()->description : 'error';
                            $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
                            $response->send();
                            exit();
                        }
                    }
                }
            }
        }
    }

/**
 * Implements hook_user_update().
 * 
 * @param $account
 * 
 */
function lr_ciam_user_update($account) {
    
    $config = \Drupal::config('lr_ciam.settings');
    $apiKey = trim($config->get('api_key'));
    $apiSecret = trim($config->get('api_secret'));
    $user_manager = \Drupal::service('lr_ciam.user_manager');
    $ciam_uid = $user_manager->lr_ciam_get_ciam_uid($account->id());
    $field_defaults = $config->get('user_fields', array());
    if (isset($_POST['op']) && $_POST['op'] == 'Save') { 
    $output = array();
  
    if(!empty($field_defaults)){
      foreach($field_defaults as $key=>$value) {
          if($value=='BirthDate'){             
              $output[$value] = isset($_POST[$key][0]["value"]['date']) ? $_POST[$key][0]["value"]['date'] : '';
              $sldate = explode('-', $output[$value]);            
                $year = isset($sldate[0]) ? trim($sldate[0]) : '';
                $month = isset($sldate[1]) ? trim($sldate[1]) : '';
                $date = isset($sldate[2]) ? trim($sldate[2]) : '';
                $formatDate = trim($month . '-' . $date . '-' . $year);
                $output[$value] = $formatDate;               
             } else {
              $output[$value] = isset($_POST[$key][0]["value"]) ? $_POST[$key][0]["value"] : '';
        }
    }}

        try {
            $accountObject = new AccountAPI($apiKey, $apiSecret, array('output_format' => 'json'));
            $result =  $accountObject->update($ciam_uid, $output);
        }
        catch (LoginRadiusException $e) {                           

        }   
     

    if (isset($_POST['status'])) {
      if ($_POST['status'] == "0" && isset($ciam_uid) && !empty($ciam_uid)) {       
          $user_manager->lr_ciam_block_user($ciam_uid);
      }
      else {        
          $user_manager->lr_ciam_unblock_user($ciam_uid);
      }
    }
    if (isset($_POST['pass']['pass1']) && !empty($_POST['pass']['pass1'])) {      
    $user = \Drupal::currentUser()->getRoles();
      if (in_array("administrator", $user)) {       
          if (empty($ciam_uid)) {           
            $params = '{
            "Email":[
               {
                  "Type":"Primary",
                  "Value":"'.$account->getEmail().'"
               }
            ],
            "UserName":"'.$account->getUsername().'",
            "Password":"'.$_POST['pass']['pass1'].'"
            }';  
            $user_manager->lr_ciam_create_user($params);
            return;
          }
        else {
          $user_manager->lr_ciam_set_password($ciam_uid, $_POST['pass']['pass1']);
        }
      }
    }
  } elseif (isset($_POST['op']) && $_POST['op'] == 'Apply' && isset($ciam_uid) && !empty($ciam_uid)) {
       
        if (isset($_POST['action']) && $_POST['action'] == 'user_block_user_action') {
            $user_manager->lr_ciam_block_user($ciam_uid);
        }
        elseif (isset($_POST['action']) && $_POST['action'] == 'user_unblock_user_action') {
            $user_manager->lr_ciam_unblock_user($ciam_uid);
        }   
    }   
}

/**
 * User form alter.
 * 
 * @param $form
 * @param $form_state
 */
function lr_ciam_form_user_form_alter(&$form, FormStateInterface $form_state) {
    $user_manager = \Drupal::service('lr_ciam.user_manager');
    $config = \Drupal::config('lr_ciam.settings');
    $user = \Drupal::currentUser()->getRoles();
    
    if (!in_array("administrator", $user) && !\Drupal::currentUser()
            ->isAnonymous()) {        
        unset($form['#validate'][1]);
        unset($form['account']['pass']);
        unset($form['account']['current_pass']);
        $form['account']['mail']['#disabled'] = TRUE;
        $apiKey = trim($config->get('api_key'));
        $apiSecret = trim($config->get('api_secret'));
        $userObject = new UserAPI($apiKey, $apiSecret, array('output_format' => 'json'));           
        $socialObject = new SocialLoginAPI($apiKey, $apiSecret, array('output_format' => 'json'));  
        try {
            $result = $socialObject->tokenValidate(trim($_SESSION['_sf2_attributes']['access_token']));
            if(isset($result->ErrorCode) && $result->ErrorCode == '906'){
                $domain = Url::fromRoute('<front>')->setAbsolute()->toString();  
                $redirectUrl = $domain.'user/logout';
                $response = new TrustedRedirectResponse($redirectUrl);             
                return $response->send();               
            }
        }
        catch (LoginRadiusException $e) { 
                $domain = Url::fromRoute('<front>')->setAbsolute()->toString();  
                $redirectUrl = $domain.'user/logout';
                $response = new TrustedRedirectResponse($redirectUrl);             
                return $response->send();   
                \Drupal::logger('ciam')->error($e);
        }

        $userprofile = $_SESSION['_sf2_attributes']['user_profile_data'];
        $defaultEmail = isset($userprofile->Email) ? $userprofile->Email[0]->Value : '';       
        
        if(isset($defaultEmail) && $defaultEmail != ''){
            if ($form['account']['mail']['#default_value'] != $defaultEmail) {
                \Drupal::database()->update('users_field_data')
                 ->condition('mail', $form['account']['mail']['#default_value'])
                 ->fields(['mail' => $defaultEmail])
                 ->execute();
            }
        }     
            
        $form['lr_update_phone'] = array(
          '#type' => 'item',
          '#theme' => 'lr_update_phone',
          '#attributes' => array('class' => array('lr-phone-container')),
          '#weight' => -15,
          '#open' => TRUE,
        );

        $form['lr_message'] = array(
          '#type' => 'item',
          '#theme' => 'lr_message',
          '#attributes' => array('class' => array('lr-message-container')),
          '#weight' => -30,
          '#open' => TRUE,
        );
       
        if(isset($userprofile->PhoneId) && $userprofile->PhoneId!= ''){
        $form['account_phone'] = [
            '#type'   => 'container',
            '#weight' => -15,
        ];        
        $form['account_phone']['phoneid'] = [
            '#type' => 'textfield',
            '#title' => t('Phone ID'),
            '#attributes' => array('readonly' => 'readonly'),
            '#description' => t('A valid phone number.'),
            '#default_value' => $userprofile->PhoneId,
        ];}
       
        if (isset($userprofile->Email) && count($userprofile->Email) > 0) {
            $form['account']['emailSetting'] = array(
              '#type' => 'fieldset',
              '#title' => t('Email Settings'),
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
            );

            $header = array(
              'email' => array('data' => 'Email'),
              'action' => array('data' => 'Action')
            );

            $form['account']['emailSetting']['add'] = array(
              '#type' => 'item',
              '#markup' => '<div class="addEmail" id="addEmail">Add Email</div>',
            );

                for ($i = 0; $i < count($userprofile->Email); $i++) {
                    $email[$i] = array(
                      '#type' => 'email',
                      '#attributes' => array('readonly' => 'readonly'),
                      '#default_value' => ($userprofile->Email[$i]->Value ? $userprofile->Email[$i]->Value : '')
                    );

                    $action[$i] = array(
                      '#type' => 'item',
                      '#markup' => '<div class="removeEmail" id="removeEmail_' . $i . '">Remove</div>',
                    );

                    $rows['customize_field_' . $i] = array(
                      'data' => array(
                        'field' => array('data' => &$email[$i]),
                        'label' => array('data' => &$action[$i])
                      )
                    );

                    $data_to_send['customize_field_' . $i] = array(
                      'field' => &$email[$i],
                      'label' => &$action[$i]
                    );
                }

                $form['account']['emailSetting']['table'] = array(
                  '#tree' => TRUE,
                  '#theme' => 'table',
                  '#header' => $header,
                  'values' => $data_to_send,
                  '#rows' => &$rows,
                );

            $form['add_email'] = array(
              '#type' => 'item',
              '#theme' => 'add_email',
              '#attributes' => array('class' => array('add-email')),
              '#weight' => -20,
              '#open' => TRUE,
            );

            $form['remove_email'] = array(
              '#type' => 'item',
              '#theme' => 'remove_email',
              '#attributes' => array('class' => array('remove-email')),
              '#weight' => -20,
              '#open' => TRUE,
            );
        }
        $form['account']['current_pass_required_value']['#access'] = FALSE;
        $form['account']['current_pass']['#access'] = FALSE;
        
          
        $configSettings = lr_ciam_get_config_option($apiKey, $apiSecret);
        if(isset($configSettings->TwoFactorAuthentication) && $configSettings->TwoFactorAuthentication->IsEnabled){
           
            try {
                $socialProfileData = $socialObject->getUserProfiledata(trim($_SESSION['_sf2_attributes']['access_token']), false, 'Provider');            
            }
            catch (LoginRadiusException $e) {
                    \Drupal::logger('ciam')->error($e);
            }
            
            if ($socialProfileData->Provider == 'RAAS') {
                $form['lr_2fa_container'] = array(
                  '#type' => 'item',
                  '#theme' => '2fa_container',
                  '#attributes' => array('class' => array('lr-2fa-container')),
                  '#weight' => -25,
                  '#open' => TRUE,
                );
            }   
        
            try {
                $isEnabled = $userObject->configureTwoFAByToken($_SESSION['_sf2_attributes']['access_token']);
            }
            catch (LoginRadiusException $e) {
                \Drupal::logger('ciam')->error($e);
            }

            if ((isset($isEnabled->IsGoogleAuthenticatorVerified) && $isEnabled->IsGoogleAuthenticatorVerified) || (isset($isEnabled->IsOTPAuthenticatorVerified) && $isEnabled->IsOTPAuthenticatorVerified)) {
                $form['lr_2fa_backup'] = array(
                  '#type' => 'details',
                  '#title' => 'Backup Codes List',
                  '#theme' => 'lr_backup_codes',
                  '#attributes' => array('class' => array('lr_2fa_backup')),
                  '#weight' => -21,
                  '#open' => TRUE,
                );
            }            
            
        }

        if (isset($_SESSION['emailVerified']) && $_SESSION['emailVerified']) {
            $form['lr_ciam_linked'] = array(
              '#type' => 'details',
              '#title' => 'Account Linking',
              '#theme' => 'lr_ciam_linked',
              '#attributes' => array('class' => array('lr-ciam-linked')),
              '#weight' => -20,
              '#open' => TRUE,
            );
        }
    }
    return $form;
}

/**
 * Unset validation for current password.
 *
 * @param $fields
 * @param $entity_type
 */
function lr_ciam_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
    if (\Drupal::moduleHandler()->moduleExists('lr_ciam')) {
        if ($entity_type->id() == 'user') {
            $constraints = $fields['mail']->getConstraints();
            unset($constraints['ProtectedUserField']);
            $fields['mail']->setConstraints($constraints);

            $constraints = $fields['pass']->getConstraints();
            unset($constraints['ProtectedUserField']);
            $fields['pass']->setConstraints($constraints);
        }
    }
}

/**
 * Delete user.
 *
 * @param $account
 */
function lr_ciam_user_predelete($account) {
    $user_manager = \Drupal::service('lr_ciam.user_manager');
    $ciam_uid = $user_manager->lr_ciam_get_ciam_uid($account->id());

    $result = $user_manager->user_delete($ciam_uid);
    $user_manager->deleteMapUser($account->id());
}

/**
 * Implement hook_mail_alter().
 *
 * @param $message
 * 
 */
function lr_ciam_mail_alter(&$message) {
    if ($message['key'] == 'register_admin_created') {
        $message['send'] = FALSE;
    }
    if ($message['key'] == 'password_reset') {
        $message['send'] = FALSE;
    }
}
/**
 * Unset options when hosted page enable.
 *
 * @return $form
 */
function lr_ciam_form_advanced_settings_alter(&$form, FormStateInterface $form_state){
  $hd_config = \Drupal::config('lr_hostedpage.settings'); 
 
  if($hd_config->get('lr_hosted_page_enable') == '1'){
    unset($form['lr_user_settings']);    
    unset($form['lr_template_settings']);    
    unset($form['lr_field_mapping']);    
  }
  return $form;
}

/**
 * Add variable in db.
 *
 */
function lr_ciam_add_extra_config_settings() {
    return array('ciam_terms_and_condition_html','ciam_welcome_email_template','ciam_prompt_password_on_social_login','ciam_check_phone_no_availability',
      'ciam_reset_password_email_template', 'ciam_email_verification_template', 'ciam_custom_options','ciam_auto_hide_messages',
      'ciam_email_verification_condition','ciam_ask_email_for_unverified_user_login','ciam_instant_link_login','ciam_instant_otp_login',
      'ciam_display_password_strength', 'ciam_debug_mode','ciam_instant_link_login_email_template',
      'ciam_enable_phone_login', 'ciam_welcome_sms_template','ciam_ask_required_fields_on_traditional_login','ciam_user_name_login',
      'ciam_sms_template_one_time_passcode', 'ciam_sms_template_phone_verification','ciam_sms_template_reset_password','ciam_sms_template_change_phone_no', 'ciam_sms_template_2fa');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add Social Login interface on register page.
 * Prefill user profile data when force registration is off.
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function lr_ciam_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
    $config = \Drupal::config('lr_ciam.settings');

    if (isset($_SESSION['social_lrdata'])) {
        $userprofile = $_SESSION['social_lrdata'];
        unset($_SESSION['social_lrdata']);

        if (isset($userprofile->ID) && !empty($userprofile->ID)) {
            $user_manager = \Drupal::service('lr_ciam.user_manager');
            $data = $user_manager->checkExistUsername($userprofile);
            $form['account']['name']['#default_value'] = $data['username'];
            $form['account']['mail']['#default_value'] = '';

            if ($config->get('verify_mail') == 1) {
                $form['account']['pass']['#type'] = 'hidden';
                $form['account']['pass']['#value'] = user_password();
            }
            $user_manager->field_create_user_array($form, $userprofile);
        }
    }
}

function lr_ciam_get_config_option($apiKey, $apiSecret){
        try {
            $cloudObject = new CloudAPI($apiKey, $apiSecret, array('output_format' => 'json'));
            return $cloudObject->getConfigurationList();               
        }
        catch (LoginRadiusException $e) {
            \Drupal::logger('ciam')->error($e);
        }            
}

/**
 * Validate LoginRadius API Credentials.
 *
 * @param $apiKey
 * @param $apiSecret
 * @return array
 */
function lr_ciam_get_authentication($apiKey, $apiSecret) {

    if (isset($apiKey)) {
        $data = array();
        try {
            $socialLoginObject = new SocialLoginAPI ($apiKey, $apiSecret, array('output_format' => 'json'));
            $result = $socialLoginObject->validateKeyandSecret();

            if (empty($result)) {
                $data['message'] = t('please check your php.ini settings to enable CURL or FSOCKOPEN');
                $data['status'] = 'error';
            }
            
            elseif (isset($result->Status) && !$result->Status) {
                $error = array(
                  "API_KEY_NOT_VALID" => "LoginRadius API key is invalid. Get your LoginRadius API key from LoginRadius account",
                  "API_SECRET_NOT_VALID" => "LoginRadius API Secret is invalid. Get your LoginRadius API Secret from LoginRadius account",
                  "API_KEY_NOT_FORMATED" => "LoginRadius API Key is not formatted correctly",
                  "API_SECRET_NOT_FORMATED" => "LoginRadius API Secret is not formatted correctly",
                );

                foreach ($result->Messages as $value) {
                    $data['message'] = $error["$value"];
                    $data['status'] = 'error';
                    break;
                }
            }
            return $data;
        }
        
        catch (LoginRadiusException $e) {
            $data['message'] = "Something went wrong, check your credentials.";
            $data['status'] = 'error';
            return $data;
        }
    }
}

/**
 * Implements hook_user_delete().
 * 
 * @param $account
 *
 */
function lr_ciam_user_delete($account) {
    if (!\Drupal::moduleHandler()->moduleExists('lr_ciam')) {
        $user_manager = \Drupal::service('lr_ciam.user_manager');
        $user_manager->deleteMapUser($account->id());
    }
}
